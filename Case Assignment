using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;

namespace Contoso_Mortgage_System_Project
{
    public class CaseAssignmentHelper
    {
        // Fetches active users
        public static List<Entity> GetActiveUsers(IOrganizationService service, ITracingService tracingService)
        {
            string fetchXml = @"
                <fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                    <entity name='systemuser'>
                        <attribute name='fullname'/>
                        <attribute name='systemuserid'/>
                        <filter type='and'>
                            <condition attribute='isdisabled' operator='eq' value='0'/>
                            <condition attribute='accessmode' operator='eq' value='0'/>
                        </filter>
                    </entity>
                </fetch>";

            EntityCollection users = service.RetrieveMultiple(new FetchExpression(fetchXml));

            tracingService.Trace("Found {0} active users.", users.Entities.Count);

            if (users.Entities.Count == 0)
            {
                tracingService.Trace("No active users found.");
                throw new InvalidPluginExecutionException("No active users available.");
            }

            return new List<Entity>(users.Entities);
        }

        // Fetches case count for each user
        public static int GetUserCaseCount(IOrganizationService service, ITracingService tracingService, Guid userId)
        {
            QueryExpression caseQuery = new QueryExpression("incident")
            {
                ColumnSet = new ColumnSet("incidentid"),
                Criteria = new FilterExpression
                {
                    Conditions =
                    {
                        new ConditionExpression("ownerid", ConditionOperator.Equal, userId)
                    }
                }
            };

            EntityCollection userCases = service.RetrieveMultiple(caseQuery);

            tracingService.Trace("User {0} has {1} cases.", userId, userCases.Entities.Count);

            return userCases.Entities.Count;
        }

        // Assign the case to the user with the lowest workload
        public static EntityReference AssignCaseToUserWithLowestWorkload(IOrganizationService service, ITracingService tracingService, Entity caseEntity, List<Entity> users)
        {
            Guid minCasesUserId = Guid.Empty;
            int minCases = int.MaxValue;

            foreach (Entity user in users)
            {
                Guid userId = user.Id;
                string userName = user.Contains("fullname") ? user["fullname"].ToString() : "Unknown";

                tracingService.Trace("Fetching cases for user: {0} (ID: {1})", userName, userId);

                // Fetch the case count for each user
                int userCaseCount = GetUserCaseCount(service, tracingService, userId);

                tracingService.Trace("User {0} has {1} cases.", userName, userCaseCount);

                if (userCaseCount < minCases)
                {
                    minCases = userCaseCount;
                    minCasesUserId = userId;
                }
            }

            if (minCasesUserId == Guid.Empty)
            {
                tracingService.Trace("No user found with minimum cases. Case not assigned.");
                return null;
            }

            tracingService.Trace("Assigning case to user with ID: {0}, who has {1} cases.", minCasesUserId, minCases);
            return new EntityReference("systemuser", minCasesUserId);
        }
    }
}
